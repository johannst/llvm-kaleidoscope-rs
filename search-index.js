var searchIndex = JSON.parse('{\
"llvm_kaleidoscope_rs":{"doc":"","t":"NNERDLLLLLALLLLLLAALALLLLLLLDLLLLLLLLNNNNNNNNNDNNELLLLLLLLLLLLLLLLLLDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENDNNDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMM","n":["A","B","Either","SMALL_STR_SIZE","SmallCStr","as_ptr","borrow","borrow","borrow_mut","borrow_mut","codegen","eq","fmt","from","from","into","into","lexer","llvm","new","parser","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Codegen","borrow","borrow_mut","compile","from","into","try_from","try_into","type_id","Char","Def","Else","Eof","Extern","For","Identifier","If","In","Lexer","Number","Then","Token","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","from","from","gettok","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","BasicBlock","FnValue","FunctionPassManager","IRBuilder","LLJit","Module","PhiValue","ResourceTracker","Type","Value","add_fn","add_incoming","add_module","append_basic_block","append_basic_block","arg","args","basic_blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","br","call","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cond_br","const_f64","create_basic_block","deref","deref","drop","drop","drop","drop","dump","dump","dump","enable_process_symbols","fadd","fcmpone","fcmpult","find_symbol","fmul","fn_type","from","from","from","from","from","from","from","from","from","from","fsub","get_fn","get_insert_block","get_name","get_parent","initialize_native_taget","into","into","into","into","into","into","into","into","into","into","is_f64","is_int","new","new","phi","pos_at_end","ret","run","set_name","shutdown","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_f64","type_fn","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of","uitofp","verify","with_ctx","with_ctx","Binary","Call","ExprAST","For","FunctionAST","If","Number","Parser","PrototypeAST","Variable","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cur_tok","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","get_next_token","into","into","into","into","new","parse_definition","parse_extern","parse_top_level_expr","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","body","cond","else_","end","start","step","then","var"],"q":[[0,"llvm_kaleidoscope_rs"],[28,"llvm_kaleidoscope_rs::codegen"],[37,"llvm_kaleidoscope_rs::lexer"],[68,"llvm_kaleidoscope_rs::llvm"],[215,"llvm_kaleidoscope_rs::parser"],[268,"llvm_kaleidoscope_rs::parser::ExprAST"]],"d":["","","Either type, for APIs accepting two types.","Fixed size of <code>SmallCStr</code> including the trailing <code>\\\\0</code> byte.","Small C string on the stack with fixed size <code>SMALL_STR_SIZE</code>.","Return pointer to C string.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Safe wrapper around the LLVM C API.","Create a new C string from <code>src</code>. Returns <code>None</code> if <code>src</code> …","","","","","","","","","Code generator from kaleidoscope AST to LLVM IR.","","","Compile either a <code>PrototypeAST</code> or a <code>FunctionAST</code> into the …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Lex and return the next token.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Wrapper for a LLVM Basic Block.","Wrapper for a LLVM Value Reference specialized for …","Wrapper for a LLVM Function PassManager (legacy).","Wrapper for a LLVM IR Builder.","Wrapper for a LLVM LLJIT.","Wrapper for a LLVM Module with its own LLVM Context.","Wrapper for a LLVM Value Reference specialized for …","A resource handle for code added to an <code>LLJit</code> instance.","Wrapper for a LLVM Type Reference.","Wrapper for a LLVM Value Reference.","Add a function with the given <code>name</code> and <code>fn_type</code> to the …","Add an incoming value to the end of a PHI list.","Add an LLVM IR module to the JIT. Return a <code>ResourceTracker</code>…","Append a Basic Block to the end of the function referenced …","Append a Basic Block to the end of the function value.","Get a value reference for the function argument at index …","Get the number of function arguments for the given …","Get the number of Basic Blocks for the given function …","","","","","","","","","","","","","","","","","","","","","Emit an unconditional br instruction.","Emit a call instruction.","","","","","","","","","","","Emit a conditional br instruction.","Get a value reference representing the const <code>f64</code> value.","Create a free-standing Basic Block without adding it to a …","","","","","","","Dump LLVM IR emitted into the Module to stdout.","Dump the LLVM Type to stdout.","Dump the LLVM Value to stdout.","Enable lookup of dynamic symbols available in the current …","Emit a fadd instruction.","Emit a fcmpone instruction.","Emit a fcmpult instruction.","Find the symbol with the name <code>sym</code> in the JIT.","Emit a fmul instruction.","Get a type reference representing the function type …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Emit a fsub instruction.","Get a function value reference to the function with the …","Get the BasicBlock the IRBuilder currently inputs into.","Get the name for the given value reference.","Get the function to which the basic block belongs.","Initialize native target for corresponding to host (useful …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if value is of <code>f64</code> type.","Check if value is of integer type.","Create a new LLJit instance.","Create a new Module instance.","Emit a phi instruction.","Position the IR Builder at the end of the given Basic …","Emit a ret instruction.","Run the optimization passes registered with the Function …","Set the name for the given value reference.","Deallocate and destroy all “ManagedStatic” variables.","","","","","","","","","","","","","","","","","","","","","","","","","","Get a type reference representing a <code>f64</code> float.","Get a type reference representing a <code>fn(args) -&gt; ret</code> …","","","","","","","","","","","Get a type reference representing for the given value …","Emit a uitofp instruction.","Verify that the given function is valid.","Create a new LLVM IR Builder with the <code>module</code>s context.","Create a new Function PassManager with the following …","Binary - Expression class for a binary operator.","Call - Expression class for function calls.","","ForExprAST - Expression class for for/in.","FunctionAST - This class represents a function definition …","If - Expression class for if/then/else.","Number - Expression class for numeric literals like “1.0…","Parser for the <code>kaleidoscope</code> language.","PrototypeAST - This class represents the “prototype” …","Variable - Expression class for referencing a variable, …","","","","","","","","","","","Implement the global variable <code>int CurTok;</code> from the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Advance the <code>cur_tok</code> by getting the next token from the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","definition ::= ‘def’ prototype expression","external ::= ‘extern’ prototype","toplevelexpr ::= expression","","","","","","","","","","","","","","","","","","","","",""],"i":[18,18,0,0,0,1,18,1,18,1,0,1,1,18,1,18,1,0,0,1,0,18,1,1,18,1,18,1,0,35,35,35,35,35,35,35,35,20,20,20,20,20,20,20,20,20,0,20,20,0,22,20,22,20,20,20,22,20,22,22,20,22,22,20,22,20,22,20,0,0,0,0,0,0,0,0,0,0,13,24,27,13,19,19,19,19,30,27,28,13,32,26,23,25,19,24,30,27,28,13,32,26,23,25,19,24,30,30,26,23,25,19,24,26,23,25,19,24,30,23,13,19,24,30,28,13,32,13,23,25,27,30,30,30,27,30,19,30,27,28,13,32,26,23,25,19,24,30,13,30,25,26,0,30,27,28,13,32,26,23,25,19,24,25,25,27,13,30,30,30,32,25,0,26,23,25,19,24,30,27,28,13,32,26,23,25,19,24,30,27,28,13,32,26,23,25,19,24,13,13,30,27,28,13,32,26,23,25,19,24,25,30,19,30,32,34,34,0,34,0,34,34,0,0,34,33,34,15,17,33,34,15,17,15,15,33,34,15,17,34,15,17,33,34,15,17,33,33,34,15,17,33,33,33,33,15,33,34,15,17,33,34,15,17,33,34,15,17,36,37,37,36,36,36,37,36],"f":[0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],0,[[1,1],3],[[1,4],5],[[]],[[]],[[]],[[]],0,0,[[[8,[[7,[6]]]]],[[9,[1]]]],0,[[],10],[[],10],[11,[[10,[1]]]],[[],10],[[],10],[[],12],[[],12],0,[[]],[[]],[[13,[16,[14,15]],[18,[15,17]]],[[10,[19,14]]]],[[]],[[]],[[],10],[[],10],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[20,20],3],[[20,4],5],[[]],[[]],[[[22,[21]]],20],[[]],[[]],[21,[[22,[21]]]],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,[[13,11,23],19],[[24,25,26]],[[27,13],28],[[13,19],26],[[19,26]],[[19,29],25],[19,29],[19,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[30,26]],[[30,19,[7,[25]]],25],[26,26],[23,23],[25,25],[19,19],[24,24],[[]],[[]],[[]],[[]],[[]],[[30,25,26,26]],[[23,31],25],[13,26],[19],[24],[30],[28],[13],[32],[13],[23],[25],[27],[[30,25,25],25],[[30,25,25],25],[[30,25,25],25],0,[[30,25,25],25],[19,23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[30,25,25],25],[[13,11],[[9,[19]]]],[30,26],[25,11],[26,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,3],[25,3],[[],27],[[],13],[[30,23,7],24],[[30,26]],[[30,25]],[[32,19]],[[25,11]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[13,23],[[13,[7,[23]],23],23],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[25,23],[[30,25,23],25],[19,3],[13,30],[13,32],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[[]],[[[33,[21]]],20],[[34,34],3],[[15,15],3],[[17,17],3],[[34,4],5],[[15,4],5],[[17,4],5],[[]],[[]],[[]],[[]],[[[33,[21]]]],[[]],[[]],[[]],[[]],[[[22,[21]]],[[33,[21]]]],[[[33,[21]]],[[10,[17,14]]]],[[[33,[21]]],[[10,[15,14]]]],[[[33,[21]]],[[10,[17,14]]]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0],"c":[],"p":[[3,"SmallCStr"],[6,"c_char"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"slice"],[8,"AsRef"],[4,"Option"],[4,"Result"],[15,"str"],[3,"TypeId"],[3,"Module"],[3,"String"],[3,"PrototypeAST"],[3,"HashMap"],[3,"FunctionAST"],[4,"Either"],[3,"FnValue"],[4,"Token"],[8,"Iterator"],[3,"Lexer"],[3,"Type"],[3,"PhiValue"],[3,"Value"],[3,"BasicBlock"],[3,"LLJit"],[3,"ResourceTracker"],[15,"usize"],[3,"IRBuilder"],[15,"f64"],[3,"FunctionPassManager"],[3,"Parser"],[4,"ExprAST"],[3,"Codegen"],[13,"For"],[13,"If"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
